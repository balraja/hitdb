columnVariable(metaColumn) ::= <<
    private <metaColumn.type> my<metaColumn.name>;<\n>
>>

primaryKey(metaColumn) ::= <<
       <if(metaColumn.primary)> 
       return my<metaColumn.name>;
       <endif>
>>

getterSetter(metaColumn) ::= <<
    /**
     * Returns the value of $metaColumn.name$.
     */
    public <metaColumn.type> get<metaColumn.name>() {
        return my<metaColumn.name>;
    }
    <\n>
    /**
     * Sets the value of $metaColumn.name$.
     */
    public void set<metaColumn.name>(
        <metaColumn.type> <metaColumn.variableName>) 
    {
        my<metaColumn.name> = <metaColumn.variableName>;
    }
    <\n>
>>

valueProvider(metaColumn) ::= <<
    case <metaColumn.name>:
        return my<metaColumn.name>;<\n>
>>

importType(metaColumn) ::= <<
<if(metaColumn.importNecessary)> 
import <metaColumn.qualifiedType>;
<endif>
>>

dbmodel(packageName, tableName, keyClassName, metaColumns) ::= <<

package <packageName>;

<metaColumns:importType()>

import org.hit.db.model.Persistable;
import org.hit.db.model.Column;

import java.util.ArrayList;
import java.util.List;

/**
 * Implementation to capture the row of <tableName>
 */
public class <tableName> implements Persistable\<<keyClassName>\>
{
    <metaColumns:columnVariable()>
    
    <metaColumns:getterSetter()>
    
    public <keyClassName> primaryKey()
    {
        <metaColumns:primaryKey()>
    }

    public Object getFieldValue(String column) 
    {
        switch (column) {
            <metaColumns:valueProvider()>
            default:
                return null;
        }
    }
}
>>